version: '2.2'
services:

  db:
    image: geonode/postgis:11
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - .env

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}

  geoserver:
    image: geonode/geoserver:2.17.2
    build: ./docker/geoserver/
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - data-dir-conf
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
    env_file:
      - .env

  django:
    restart: unless-stopped
    build: .
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
    depends_on:
      - db
      - rabbitmq
      - data-dir-conf
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
    env_file:
      - .env
    environment:
      UWSGI_CMD: uwsgi --ini /usr/src/geonode_master/uwsgi.ini
      IS_CELERY: 'False'

  celery:
    restart: unless-stopped
    build: .
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: celery
      org.geonode.instance.name: geonode
    depends_on:
      - db
      - rabbitmq
      - data-dir-conf
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
    env_file:
      - .env
    environment:
      CELERY_CMD: celery beat --app=geonode.celery_app:app -l DEBUG -f /var/log/celery.log
      IS_CELERY: 'True'

  # - Uncomment to enable celery monitor
  # celeryworker:
  #   restart: unless-stopped
  #   build: .
  #   container_name: celeryworker4${COMPOSE_PROJECT_NAME}
  #   stdin_open: true
  #   # tty: true
  #   labels:
  #     org.geonode.component: celeryworker
  #     org.geonode.instance.name: geonode
  #   depends_on:
  #     - db
  #     - rabbitmq
  #   env_file:
  #     - .env
  #   environment:
  #     CELERY_CMD: celery worker --app=geonode.celery_app:app -l DEBUG -c 4 -P threads -f /var/log/celery.log
  #     IS_CELERY: 'True'
  #
  # celerymonitor:
  #   restart: unless-stopped
  #   build: .
  #   container_name: celerymonitor4${COMPOSE_PROJECT_NAME}
  #   stdin_open: true
  #   # tty: true
  #   labels:
  #     org.geonode.component: celerymonitor
  #     org.geonode.instance.name: geonode
  #   depends_on:
  #     - db
  #     - rabbitmq
  #   env_file:
  #     - .env
  #   environment:
  #     CELERY_CMD: celery flower --auto_refresh=True --debug=False -A geonode.celery_app --broker=${BROKER_URL} --basic_auth=${ADMIN_USERNAME}:${ADMIN_PASSWORD} --address=0.0.0.0 --port=5555
  #     IS_CELERY: 'True'

  geonode:
    image: geonode/nginx:geoserver
    build: ./docker/nginx/
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - geoserver
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
    env_file:
      - .env

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: geonode/letsencrypt:latest
    build: ./docker/letsencrypt/
    restart: on-failure
    volumes:
      - nginx-certificates:/geonode-certificates/
    env_file:
      - .env

  data-dir-conf:
    image: geonode/geoserver_data:2.17.2
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  jenkins:
    image: jenkins/jenkins:lts
    # image: istresearch/jenkins:latest
    container_name: jenkins4${COMPOSE_PROJECT_NAME}
    user: jenkins
    ports:
      - '${JENKINS_HTTP_PORT}:${JENKINS_HTTP_PORT}'
      - '${JENKINS_HTTPS_PORT}:${JENKINS_HTTPS_PORT}'
      - '50000:50000'
    volumes:
      - jenkins_data:/var/jenkins_home
      - backup-restore:/backup_restore
    environment:
      - 'JENKINS_OPTS=--httpPort=${JENKINS_HTTP_PORT} --httpsPort=${JENKINS_HTTPS_PORT} --prefix=/jenkins'

volumes:
  jenkins_data:
    driver: local
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  nginx-certificates:
    name: ${COMPOSE_PROJECT_NAME}-nginxcerts
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  backup-restore:
    name: ${COMPOSE_PROJECT_NAME}-backup-restore
